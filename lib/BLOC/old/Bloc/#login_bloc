import 'dart:async';

import 'package:meta/meta.dart';
import 'package:bloc/bloc.dart';
import 'package:shopping_junction_seller/BLOC/event/Authentication_event.dart';
import 'package:shopping_junction_seller/BLOC/event/login_event.dart';
import 'package:shopping_junction_seller/BLOC/repository/UserRepository.dart';
import 'package:shopping_junction_seller/BLOC/state/login_state.dart';
import 'Authentication_bloc.dart';


class LoginBloc extends Bloc<LoginEvent, LoginState> {
  final UserRepository userRepository;
  final AuthenticationBloc authenticationBloc;

  LoginBloc({
    @required this.userRepository,
    @required this.authenticationBloc,
  })  : assert(userRepository != null),
        assert(authenticationBloc != null);

  LoginState get initialState => LoginInitial();

  @override
  Stream<LoginState> mapEventToState(LoginEvent event) async* {
    if(event is LogoutButtonPressed){
      // yield Loggedout();
      try{
        authenticationBloc.add(LoggedOut());
      }
      catch(error){
        yield LoginFailure(error: error.toString());
      }
    }

    if (event is LoginButtonPressed) {
      yield LoginLoading();

      try {
        final token = await userRepository.authenticate(
          username: event.username,
          password: event.password,
        );
        if(token!=null){
          authenticationBloc.add(LoggedIn(token: token));
          yield LoginInitial();
        }
        else{
          yield LoginFailure(error: "Login fail");
        }

      } catch (error) {
        yield LoginFailure(error: error.toString());
      }
    }


  }
}